{"ast":null,"code":"var _jsxFileName = \"/Users/beatrizbarbosa/Projects/projetos-pessoais/trybewallet/src/components/Form.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getExpenses, ThunkAPI2, getTotalValue } from '../actions/wallet';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      description: ''\n    };\n    this.HandleMoedaOption = this.HandleMoedaOption.bind(this);\n    this.HandleValor = this.HandleValor.bind(this);\n    this.HandleMoeda = this.HandleMoeda.bind(this);\n    this.HandlePag = this.HandlePag.bind(this);\n    this.HandleTag = this.HandleTag.bind(this);\n    this.HandleDescricao = this.HandleDescricao.bind(this);\n    this.HandleButton = this.HandleButton.bind(this);\n  }\n\n  HandleMoedaOption() {\n    const {\n      currencies\n    } = this.props;\n    const filter = currencies.filter(item => item[0] !== 'USDT'); // filtro o array\n    // console.log(filter);\n    // retorno as options\n\n    const options = filter.map(item => /*#__PURE__*/React.createElement(\"option\", {\n      key: item[0],\n      value: item[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, item[0]));\n    return options;\n  }\n\n  HandleValor(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  HandleMoeda(event) {\n    this.setState({\n      currency: event.target.value\n    });\n  }\n\n  HandlePag(event) {\n    this.setState({\n      method: event.target.value\n    });\n  }\n\n  HandleTag(event) {\n    this.setState({\n      tag: event.target.value\n    });\n  }\n\n  HandleDescricao(event) {\n    this.setState({\n      description: event.target.value\n    });\n  }\n\n  async HandleButton() {\n    const {\n      id,\n      totalValue,\n      ThunkAPI2Dispatch,\n      firstDispatchGetExpenses,\n      firstGetTotalValue\n    } = this.props; // pego do estado global a partir do mapStateToProps e as funções tunk do mapDispatchToProps\n\n    await ThunkAPI2Dispatch(); // espero terminar a requisição da api2\n\n    const {\n      exchangeRates\n    } = this.props; // pego o objeto exchangeRates depois que chamei api, sendo assim depois que ele foi preenchido\n\n    const idNumber = id + 1; // soma para criar o valor do novo id\n    // para criar a contagem do id eu crio um id no estado global e atualizo ele cada vez que clico no botão,\n    // assim o valor inicial da contagem é imutavel e fixo, e conforme vou clicando ele vai atualizando\n\n    const {\n      value,\n      currency,\n      method,\n      tag,\n      description\n    } = this.state; // crio o objeto que vai para o estado global\n\n    const expenses = {\n      id: idNumber,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates\n    };\n    console.log(expenses);\n    firstDispatchGetExpenses(expenses); // passo o expenses para o estado global\n\n    const valueNumber = Number(value); // transformo o value em numero\n\n    const valueMoeda = Number(exchangeRates[currency].ask); // pego o valor do cambio da moeda, tive ajuda do lucas pedroso nessa const\n\n    const total = totalValue + Number((valueNumber * valueMoeda).toFixed(2)); // na mesa logica da const idNumber, faço a soma do valor total das despesas\n    // crio um totalValue no estado global e atualizo ele cada vez que clico no botão o enviando para o estado global,\n\n    console.log(typeof value);\n    firstGetTotalValue(total); // colocar set\n    // passo o valor total para o estado global na chave totalvalue\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"wallet-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"valor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"Valor\",\n      className: \"wallet-input\",\n      type: \"number\",\n      name: \"valor\",\n      id: \"valor\",\n      onChange: this.HandleValor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"moeda\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      id: \"moeda\",\n      onChange: this.HandleMoeda,\n      className: \"wallet-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      hidden: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, \"Moeda\"), this.HandleMoedaOption())), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"pag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      id: \"pag\",\n      onChange: this.HandlePag,\n      className: \"wallet-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      hidden: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, \"M\\xE9todo de pagamento\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Dinheiro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, \" Dinheiro \"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de cr\\xE9dito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, \" Cart\\xE3o de cr\\xE9dito \"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de d\\xE9bito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, \" Cart\\xE3o de d\\xE9bito \"))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      id: \"tag\",\n      onChange: this.HandleTag,\n      className: \"wallet-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      hidden: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, \"Tag\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Alimenta\\xE7\\xE3o\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, \" Alimenta\\xE7\\xE3o \"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Lazer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, \" Lazer \"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Trabalho\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, \" Trabalho \"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Transporte\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, \" Transporte \"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Sa\\xFAde\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, \" Sa\\xFAde \"))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"descri\\xE7\\xE3o\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      placeholder: \"Descri\\xE7\\xE3o\",\n      className: \"wallet-input\",\n      type: \"text\",\n      id: \"descri\\xE7\\xE3o\",\n      onChange: this.HandleDescricao,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.HandleButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, \"Adicionar despesas\"));\n  }\n\n} // estou pegando os valores do estado global redux\n\n\nconst mapStateToProps = state => ({\n  currencies: state.wallet.currencies,\n  id: state.wallet.id,\n  exchangeRates: state.wallet.exchangeRates,\n  totalValue: state.wallet.totalValue\n}); // estou passando valores para o estado globar redux\n\n\nconst mapDispatchToProps = dispatch => ({\n  firstDispatchGetExpenses: expenses => dispatch(getExpenses(expenses)),\n  ThunkAPI2Dispatch: () => dispatch(ThunkAPI2()),\n  firstGetTotalValue: value => dispatch(getTotalValue(value))\n});\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.array).isRequired,\n  firstDispatchGetExpenses: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  ThunkAPI2Dispatch: PropTypes.func.isRequired,\n  exchangeRates: PropTypes.objectOf(PropTypes.array).isRequired,\n  totalValue: PropTypes.number.isRequired,\n  firstGetTotalValue: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form); // tive ajuda do João Andrade para entender asincronidade da chamada do thunk api e para atualizar o estado global da chave expenses","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/projetos-pessoais/trybewallet/src/components/Form.js"],"names":["React","PropTypes","connect","getExpenses","ThunkAPI2","getTotalValue","Form","Component","constructor","props","state","value","currency","method","tag","description","HandleMoedaOption","bind","HandleValor","HandleMoeda","HandlePag","HandleTag","HandleDescricao","HandleButton","currencies","filter","item","options","map","event","setState","target","id","totalValue","ThunkAPI2Dispatch","firstDispatchGetExpenses","firstGetTotalValue","exchangeRates","idNumber","expenses","console","log","valueNumber","Number","valueMoeda","ask","total","toFixed","render","mapStateToProps","wallet","mapDispatchToProps","dispatch","propTypes","arrayOf","array","isRequired","func","number","objectOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getExpenses, ThunkAPI2, getTotalValue } from '../actions/wallet';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      description: '',\n    };\n\n    this.HandleMoedaOption = this.HandleMoedaOption.bind(this);\n    this.HandleValor = this.HandleValor.bind(this);\n    this.HandleMoeda = this.HandleMoeda.bind(this);\n    this.HandlePag = this.HandlePag.bind(this);\n    this.HandleTag = this.HandleTag.bind(this);\n    this.HandleDescricao = this.HandleDescricao.bind(this);\n    this.HandleButton = this.HandleButton.bind(this);\n  }\n\n  HandleMoedaOption() {\n    const { currencies } = this.props;\n\n    const filter = currencies.filter((item) => item[0] !== 'USDT'); // filtro o array\n    // console.log(filter);\n\n    // retorno as options\n    const options = filter.map((item) => (\n      <option key={ item[0] } value={ item[0] }>\n        { item[0] }\n      </option>\n    ));\n\n    return options;\n  }\n\n  HandleValor(event) { this.setState({ value: event.target.value }); }\n\n  HandleMoeda(event) { this.setState({ currency: event.target.value }); }\n\n  HandlePag(event) { this.setState({ method: event.target.value }); }\n\n  HandleTag(event) { this.setState({ tag: event.target.value }); }\n\n  HandleDescricao(event) { this.setState({ description: event.target.value }); }\n\n  async HandleButton() {\n    const { id, totalValue, ThunkAPI2Dispatch, firstDispatchGetExpenses,\n      firstGetTotalValue } = this.props;\n    // pego do estado global a partir do mapStateToProps e as funções tunk do mapDispatchToProps\n\n    await ThunkAPI2Dispatch();\n    // espero terminar a requisição da api2\n\n    const { exchangeRates } = this.props;\n    // pego o objeto exchangeRates depois que chamei api, sendo assim depois que ele foi preenchido\n\n    const idNumber = id + 1;\n    // soma para criar o valor do novo id\n    // para criar a contagem do id eu crio um id no estado global e atualizo ele cada vez que clico no botão,\n    // assim o valor inicial da contagem é imutavel e fixo, e conforme vou clicando ele vai atualizando\n\n    const { value, currency, method, tag, description } = this.state;\n\n    // crio o objeto que vai para o estado global\n    const expenses = {\n      id: idNumber,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates,\n    };\n\n    console.log(expenses);\n\n    firstDispatchGetExpenses(expenses);\n    // passo o expenses para o estado global\n\n    const valueNumber = Number(value);\n    // transformo o value em numero\n    const valueMoeda = Number(exchangeRates[currency].ask);\n    // pego o valor do cambio da moeda, tive ajuda do lucas pedroso nessa const\n    const total = totalValue + Number((valueNumber * valueMoeda).toFixed(2));\n    // na mesa logica da const idNumber, faço a soma do valor total das despesas\n    // crio um totalValue no estado global e atualizo ele cada vez que clico no botão o enviando para o estado global,\n    console.log(typeof value);\n    firstGetTotalValue(total); // colocar set\n    // passo o valor total para o estado global na chave totalvalue\n  }\n\n  render() {\n    return (\n      <form className=\"wallet-form\">\n        <label htmlFor=\"valor\">\n          {/* Valor: */}\n          <input \n            placeholder=\"Valor\"\n            className=\"wallet-input\"\n            type=\"number\" \n            name=\"valor\" \n            id=\"valor\" \n            onChange={ this.HandleValor } />\n        </label>\n\n        <label htmlFor=\"moeda\">\n          {/* Moeda: */}\n          <select id=\"moeda\" onChange={ this.HandleMoeda } className=\"wallet-input\">\n            <option hidden>Moeda</option>\n            { this.HandleMoedaOption() }\n          </select>\n        </label>\n\n        <label htmlFor=\"pag\">\n          {/* Método de pagamento: */}\n          <select id=\"pag\" onChange={ this.HandlePag } className=\"wallet-input\">\n            <option hidden>Método de pagamento</option>\n            <option value=\"Dinheiro\"> Dinheiro </option>\n            <option value=\"Cartão de crédito\"> Cartão de crédito </option>\n            <option value=\"Cartão de débito\"> Cartão de débito </option>\n          </select>\n        </label>\n\n        <label htmlFor=\"tag\">\n          {/* Tag: */}\n          <select id=\"tag\" onChange={ this.HandleTag } className=\"wallet-input\">\n            <option hidden>Tag</option>\n            <option value=\"Alimentação\"> Alimentação </option>\n            <option value=\"Lazer\"> Lazer </option>\n            <option value=\"Trabalho\"> Trabalho </option>\n            <option value=\"Transporte\"> Transporte </option>\n            <option value=\"Saúde\"> Saúde </option>\n          </select>\n        </label>\n\n        <label htmlFor=\"descrição\">\n          {/* Descrição: */}\n          <textarea\n            placeholder=\"Descrição\"\n            className=\"wallet-input\"\n            type=\"text\" \n            id=\"descrição\" \n            onChange={ this.HandleDescricao } />\n        </label>\n\n        <button type=\"button\" onClick={ this.HandleButton }>\n          Adicionar despesas\n        </button>\n      </form>\n    );\n  }\n}\n\n// estou pegando os valores do estado global redux\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  id: state.wallet.id,\n  exchangeRates: state.wallet.exchangeRates,\n  totalValue: state.wallet.totalValue,\n});\n\n// estou passando valores para o estado globar redux\nconst mapDispatchToProps = (dispatch) => ({\n  firstDispatchGetExpenses: (expenses) => dispatch(getExpenses(expenses)),\n  ThunkAPI2Dispatch: () => dispatch(ThunkAPI2()),\n  firstGetTotalValue: (value) => dispatch(getTotalValue(value)),\n});\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.array).isRequired,\n  firstDispatchGetExpenses: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  ThunkAPI2Dispatch: PropTypes.func.isRequired,\n  exchangeRates: PropTypes.objectOf(PropTypes.array).isRequired,\n  totalValue: PropTypes.number.isRequired,\n  firstGetTotalValue: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\n// tive ajuda do João Andrade para entender asincronidade da chamada do thunk api e para atualizar o estado global da chave expenses\n"]},"metadata":{},"sourceType":"module"}