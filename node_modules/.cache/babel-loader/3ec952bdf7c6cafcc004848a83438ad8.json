{"ast":null,"code":"import { currencyAPI } from '../dataApi';\nexport const loadingRequest = () => ({\n  type: 'LOADING_REQUEST'\n});\nexport const errorRequest = error => ({\n  type: 'ERROR_REQUEST',\n  error\n});\nexport const successRequest = data => ({\n  type: 'SUCCESS_REQUEST',\n  data\n});\nexport const ThunkAPI = () => async dispatch => {\n  // chamo a actin loadingRequest para atualizar o estado global para eu ter a informação toda vez que a api estiver carregando\n  dispatch(loadingRequest()); // chama a api\n\n  const api = await currencyAPI(); // a api é retornada em um grade objeto\n\n  console.log(api);\n  const arrayAPI = Object.entries(api); // transformo um objeto const api em um array\n\n  console.log(arrayAPI);\n  dispatch(successRequest(arrayAPI)); // faço o dispatch para chamar a action e passar para o reducer\n};\nexport const getExpenses = expenses => ({\n  type: 'GET_EXPENSES',\n  expenses\n});\nexport const exchangeRates = data => ({\n  type: 'GET_EXCHANGE_RATES',\n  data\n});\nexport const ThunkAPI2 = () => async dispatch => {\n  // chamo a actin loadingRequest para atualizar o estado global para eu ter a informação toda vez que a api estiver carregando\n  dispatch(loadingRequest()); // chama a api\n\n  const api = await currencyAPI(); // a api é retornada em um grade objeto\n\n  console.log(api);\n  dispatch(exchangeRates(api)); // faço o dispatch para chamar a action e passar para o reducer\n};\nexport const getTotalValue = value => ({\n  type: 'GET_TOTAL_VALUE',\n  value\n});\nexport const deleteExpenses = id => ({\n  type: 'DELETE',\n  id\n});","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/projetos-pessoais/trybewallet/src/actions/wallet.js"],"names":["currencyAPI","loadingRequest","type","errorRequest","error","successRequest","data","ThunkAPI","dispatch","api","console","log","arrayAPI","Object","entries","getExpenses","expenses","exchangeRates","ThunkAPI2","getTotalValue","value","deleteExpenses","id"],"mappings":"AAAA,SAASA,WAAT,QAA4B,YAA5B;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAO;AACnCC,EAAAA,IAAI,EAAE;AAD6B,CAAP,CAAvB;AAIP,OAAO,MAAMC,YAAY,GAAIC,KAAD,KAAY;AACtCF,EAAAA,IAAI,EAAE,eADgC;AAEtCE,EAAAA;AAFsC,CAAZ,CAArB;AAKP,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACvCJ,EAAAA,IAAI,EAAE,iBADiC;AAEvCI,EAAAA;AAFuC,CAAX,CAAvB;AAKP,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD;AACAA,EAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR,CAFgD,CAIhD;;AACA,QAAMQ,GAAG,GAAG,MAAMT,WAAW,EAA7B,CALgD,CAKf;;AACjCU,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,QAAMG,QAAQ,GAAGC,MAAM,CAACC,OAAP,CAAeL,GAAf,CAAjB,CAPgD,CAOV;;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AAEAJ,EAAAA,QAAQ,CAACH,cAAc,CAACO,QAAD,CAAf,CAAR,CAVgD,CAWhD;AACD,CAZM;AAcP,OAAO,MAAMG,WAAW,GAAIC,QAAD,KAAe;AACxCd,EAAAA,IAAI,EAAE,cADkC;AAExCc,EAAAA;AAFwC,CAAf,CAApB;AAKP,OAAO,MAAMC,aAAa,GAAIX,IAAD,KAAW;AACtCJ,EAAAA,IAAI,EAAE,oBADgC;AAEtCI,EAAAA;AAFsC,CAAX,CAAtB;AAKP,OAAO,MAAMY,SAAS,GAAG,MAAM,MAAOV,QAAP,IAAoB;AACjD;AACAA,EAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR,CAFiD,CAIjD;;AACA,QAAMQ,GAAG,GAAG,MAAMT,WAAW,EAA7B,CALiD,CAKhB;;AACjCU,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEAD,EAAAA,QAAQ,CAACS,aAAa,CAACR,GAAD,CAAd,CAAR,CARiD,CASjD;AACD,CAVM;AAYP,OAAO,MAAMU,aAAa,GAAIC,KAAD,KAAY;AACvClB,EAAAA,IAAI,EAAE,iBADiC;AAEvCkB,EAAAA;AAFuC,CAAZ,CAAtB;AAKP,OAAO,MAAMC,cAAc,GAAIC,EAAD,KAAS;AACrCpB,EAAAA,IAAI,EAAE,QAD+B;AAErCoB,EAAAA;AAFqC,CAAT,CAAvB","sourcesContent":["import { currencyAPI } from '../dataApi';\n\nexport const loadingRequest = () => ({\n  type: 'LOADING_REQUEST',\n});\n\nexport const errorRequest = (error) => ({\n  type: 'ERROR_REQUEST',\n  error,\n});\n\nexport const successRequest = (data) => ({\n  type: 'SUCCESS_REQUEST',\n  data,\n});\n\nexport const ThunkAPI = () => async (dispatch) => {\n  // chamo a actin loadingRequest para atualizar o estado global para eu ter a informação toda vez que a api estiver carregando\n  dispatch(loadingRequest());\n\n  // chama a api\n  const api = await currencyAPI(); // a api é retornada em um grade objeto\n  console.log(api);\n  const arrayAPI = Object.entries(api); // transformo um objeto const api em um array\n  console.log(arrayAPI);\n\n  dispatch(successRequest(arrayAPI));\n  // faço o dispatch para chamar a action e passar para o reducer\n};\n\nexport const getExpenses = (expenses) => ({\n  type: 'GET_EXPENSES',\n  expenses,\n});\n\nexport const exchangeRates = (data) => ({\n  type: 'GET_EXCHANGE_RATES',\n  data,\n});\n\nexport const ThunkAPI2 = () => async (dispatch) => {\n  // chamo a actin loadingRequest para atualizar o estado global para eu ter a informação toda vez que a api estiver carregando\n  dispatch(loadingRequest());\n\n  // chama a api\n  const api = await currencyAPI(); // a api é retornada em um grade objeto\n  console.log(api);\n\n  dispatch(exchangeRates(api));\n  // faço o dispatch para chamar a action e passar para o reducer\n};\n\nexport const getTotalValue = (value) => ({\n  type: 'GET_TOTAL_VALUE',\n  value,\n});\n\nexport const deleteExpenses = (id) => ({\n  type: 'DELETE',\n  id,\n});\n"]},"metadata":{},"sourceType":"module"}